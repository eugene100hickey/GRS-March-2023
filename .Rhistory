library(tidyverse)
library(matlab)
begin <- 30043
end <- 95000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30843
end <- 95000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(tidyverse)
# library(tidytext)
library(rvest)
start <- 0
year <- 2019
my_rating <- 8.2
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 1
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast1 <- cast
year <- 2014
my_rating <- 8
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 2
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast[cast %in% cast1]
year <- 2012
my_rating <- 8
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(str_detect(genre, "Drama"),
str_detect(genre, "Comedy"),
str_detect(genre, "Romance")))
library(words)
z <- words |>
filter(word_length == 4)
z |> filter(str_detect(word, "slu."))
library(tidyverse)
#data
tx_injuries <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-10/tx_injuries.csv")
#Cleaning the age column, the one I'll be using
injuries <- tx_injuries%>%
mutate(age = as.numeric(age))%>%
filter(age != "NA")
View(injuries)
#creating dataframe with density as I want to plot with geom_line
inj_dens <- density(injuries$age)
df <- data.frame(x=inj_dens$x, y=inj_dens$y)%>%filter(x>= 0)
#Second data frame that will be used to create "fake gridlines"
#I'm basically taking the density df and selecting every 20th row
#this will create the "structure" of the rollercoaster
df2 <- df[seq(1, nrow(df), 20), ]
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(tidyverse)
library(png)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(gridGraphics)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(ggimage)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(ggfortify)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(rgdal)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
require(readxl)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(ggimage)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
library(getTBinR)
install.packages("getTBinR")
# install.packages("devtools")
devtools::install_github("seabbs/getTBinR")
library(getTBinR)
library(getTBinR)
library(ggimage)
library(tidyverse)
library(gganimate)
library(ggfortify)
library(rgdal)
library(rmapshaper)
library(png)
library(gridGraphics)
library(extrafont)
library(imager)
library(factoextra)
library(knitr)
library(kableExtra)
library(tibble)
library(scales)
library(ABAData)
library(ggmap)
library(lubridate)
library(rgbif)
library(ggwordcloud)
require(httr)
require(readxl)
library(rtweet)
library(emo)
library(rvest)
#images that will be used in the plot (the wagons)
img1 <- load.image("https://github.com/aaumaitre/tidytuesday/blob/master/Amusement%20Parks/roller.png?raw=true")
#images that will be used in the plot (the wagons)
img1 <- load.image("images/roller.png")
g1 <- rasterGrob(img1, interpolate=FALSE)
img2 <- load.image("images/roller2.png")
g2 <- rasterGrob(img2, interpolate=FALSE)
img3 <- load.image("images/roller3.png")
g3 <- rasterGrob(img3, interpolate=FALSE)
roller <- df %>%
ggplot(aes(x,y))+ #x is age, y is density
geom_linerange(data = df2, aes(x =x, ymin = 0, ymax = y),
color = 'grey40', alpha = 0.6) + #the gridlines
geom_line(color = "#e44fb7", size = 1.5)+
#Now adding the wagons:
annotation_custom(g1, xmin=5.5, xmax=13, ymin=0.025, ymax=0.030) +
annotation_custom(g2, xmin=32, xmax=38, ymin=0.013, ymax=0.019) +
annotation_custom(g3, xmin=75, xmax=83, ymin=-0.0015, ymax=0.004) +
#The two annotations: one curve and one text for each
geom_curve(x = 13, y = 0.028, xend = 18, yend = 0.029, color = "#ec99d3",
curvature = -0.2,  arrow = arrow(length = unit(0.1, "inches"))) +
scale_x_continuous(breaks = seq(0, 70, by = 10))+
scale_y_continuous(limits = c(0, 0.03))+
theme_minimal() +
theme(
plot.background = element_rect(fill = "black"),
panel.grid = element_blank(),
plot.margin = unit(c(1.2, 0.5, 0.5, 0.5), "cm"),
#adds some space around
text = element_text(
color = "white",
size = 10,
family = "Ink Free",
face = "bold"
),
axis.text = element_text(color = "white"),
axis.title.y = element_text(angle = 0),
plot.caption = element_text(
color = "#ec99d3",
size = 9,
family = "Arial"
),
plot.title = element_text(
face = "bold",
hjust = 0.5,
color = "white",
size = 16,
vjust = 6,
family = "Ink Free"
),
#vjust to move it towards margins
panel.spacing = unit(2, "lines")
) +
labs(
title = "Age distribution of Amusement Park injuries in Texas",
y = "Density",
x = "Age of injured person",
caption = "#tidytuesday by @ariamsita, data: data.world"
) +
annotate(
"text",
x = 23.5,
y = 0.029,
label = "There is a peak in \ninjuries among \nchildren aged around 10",
color = "white",
size = 2.7
) +
geom_curve(
x = 37,
y = 0.017,
xend = 43,
yend = 0.019,
color = "#ec99d3",
curvature = -0.2,
arrow = arrow(length = unit(0.1, "inches"))
) +
annotate(
"text",
x = 51,
y = 0.019,
label = "From age 35 onwards, \ninjuries sharply decrease \n(probably attendance to \namusement parks too!)",
color = "white",
size = 2.7
)
roller
roller <- df %>%
ggplot(aes(x,y))+ #x is age, y is density
geom_linerange(data = df2, aes(x =x, ymin = 0, ymax = y),
color = 'grey40', alpha = 0.6) + #the gridlines
geom_line(color = "#e44fb7", size = 1.5) +
#The two annotations: one curve and one text for each
geom_curve(x = 13, y = 0.028, xend = 18, yend = 0.029, color = "#ec99d3",
curvature = -0.2,  arrow = arrow(length = unit(0.1, "inches"))) +
scale_x_continuous(breaks = seq(0, 70, by = 10))+
scale_y_continuous(limits = c(0, 0.03))+
theme_minimal() +
theme(
plot.background = element_rect(fill = "black"),
panel.grid = element_blank(),
plot.margin = unit(c(1.2, 0.5, 0.5, 0.5), "cm"),
#adds some space around
text = element_text(
color = "white",
size = 10,
family = "Ink Free",
face = "bold"
),
axis.text = element_text(color = "white"),
axis.title.y = element_text(angle = 0),
plot.caption = element_text(
color = "#ec99d3",
size = 9,
family = "Arial"
),
plot.title = element_text(
face = "bold",
hjust = 0.5,
color = "white",
size = 16,
vjust = 6,
family = "Ink Free"
),
#vjust to move it towards margins
panel.spacing = unit(2, "lines")
) +
labs(
title = "Age distribution of Amusement Park injuries in Texas",
y = "Density",
x = "Age of injured person",
caption = "#tidytuesday by @ariamsita, data: data.world"
) +
annotate(
"text",
x = 23.5,
y = 0.029,
label = "There is a peak in \ninjuries among \nchildren aged around 10",
color = "white",
size = 2.7
) +
geom_curve(
x = 37,
y = 0.017,
xend = 43,
yend = 0.019,
color = "#ec99d3",
curvature = -0.2,
arrow = arrow(length = unit(0.1, "inches"))
) +
annotate(
"text",
x = 51,
y = 0.019,
label = "From age 35 onwards, \ninjuries sharply decrease \n(probably attendance to \namusement parks too!)",
color = "white",
size = 2.7
)
roller
roller +
#Now adding the wagons:
annotation_custom(g1, xmin=5.5, xmax=13, ymin=0.025, ymax=0.030) +
annotation_custom(g2, xmin=32, xmax=38, ymin=0.013, ymax=0.019) +
annotation_custom(g3, xmin=75, xmax=83, ymin=-0.0015, ymax=0.004)
?annotation_custom
library(tidyverse)
library(matlab)
begin <- 32007
end <- 32100
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
# library(tidytext)
library(rvest)
start <- 0
year <- 2019
my_rating <- 7.3
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(rating == my_rating))
index <- 4
cast_url <- glue::glue("https://www.imdb.com/title/tt{all_movies$code[index]}/fullcredits/?ref_=tt_ql_cl")
xml_cast <- ".primary_photo+ td a"
w <- read_html(cast_url)
cast_data_html <- html_nodes(w, xml_cast)
(cast <- html_text(cast_data_html) |>
str_remove("\n") |>
str_squish())
cast1 <- cast
year <- 2004
movie_ratings <- function(start = 20) {
start <- start*50
new_url <- glue::glue("https://www.imdb.com/search/title/?title_type=feature&year={year}-01-01,{year}-12-31&start={start}")
xml_title <-  ".lister-item-header a"
xml_genre <- ".genre"
xml_rating <- ".ratings-imdb-rating strong"
w <- read_html(new_url)
title_data_html <- html_nodes(w, xml_title)
genre_data_html <- html_nodes(w, xml_genre)
rating_data_html <- html_nodes(w, xml_rating)
codes <- html_attr(html_nodes(w, "a"), "href") |>
as_tibble() |>
filter(str_detect(value, "/title/tt"),
str_detect(value, "ref_=adv_li_tt")) |>
mutate(value = str_remove(value, "/title/tt"),
value = str_remove(value, "ref_=adv_li_tt"),
value = str_remove(value, "//?"),
value = str_sub(value, start = 1, end = nchar(value)-1)) |>
distinct()
title <- html_text(title_data_html)
genre <- html_text(genre_data_html) |>
str_remove_all("\n") |>
str_squish()
rating <- html_text(rating_data_html)|>
str_remove_all("\n") |>
str_squish()
z <- tibble(title = title,
genre = genre,
rating = as.numeric(rating),
code = codes$value)
}
(all_movies <- map_df(0:3, movie_ratings) |>
filter(str_detect(genre, "Drama"),
str_detect(genre, "Crime"),
str_detect(genre, "Thriller")))
library(likert)
remotes::install_github('jbryer/likert')
library(likert)
?likert
data(pisaitems)
items29 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST25Q']
names(items29) <- c("Magazines", "Comic books", "Fiction",
"Non-fiction books", "Newspapers")
l29 <- likert(items29)
summary(l29)
plot(l29)
class(l29)
l29
data(pisaitems)
items29 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST25Q']
names(items29) <- c("Magazines", "Comic books", "Fiction",
"Non-fiction books", "Newspapers")
l29 <- likert(items29)
summary(l29)
plot(l29) + theme_minimal()
data(pisaitems)
items29 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST25Q']
names(items29) <- c("Magazines", "Comic books", "Fiction",
"Non-fiction books", "Newspapers")
l29 <- likert(items29)
summary(l29)
plot(l29)
data(pisaitems)
items29 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST25Q']
names(items29) <- c("Magazines", "Comic books", "Fiction",
"Non-fiction books", "Newspapers")
l29 <- likert(items29)
summary(l29)
plot(l29) + theme(text = element_text(family = "Ink Free", size = 36))
data(pisaitems)
items29 <- pisaitems[,substr(names(pisaitems), 1,5) == 'ST25Q']
names(items29) <- c("Magazines", "Comic books", "Fiction",
"Non-fiction books", "Newspapers")
l29 <- likert(items29)
summary(l29)
plot(l29) + theme(text = element_text(family = "Ink Free", size = 24))
library(showtext)
