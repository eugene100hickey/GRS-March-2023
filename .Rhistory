read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
library(rvest)
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
library(ggtext)
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
greens <- search_tweets(q= search_term, n=10000,
geocode = "53.33,-6.25,1500mi",
token = token)
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
date <- Sys.Date()-3
date <- paste0(wday(date, label = T, abbr = F), " ", month(date, label = T, abbr = F), " ", day(date), " ",year(date))
library(lubridate)
date <- paste0(wday(date, label = T, abbr = F), " ", month(date, label = T, abbr = F), " ", day(date), " ",year(date))
search_term <- "LFC"
# downloads tweets
token <- get_token()
greens <- search_tweets(q= search_term, n=10000,
geocode = "53.33,-6.25,1500mi",
token = token)
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
search_term <- "#ynwa"
# downloads tweets
token <- get_token()
greens <- search_tweets(q= search_term, n=10000,
geocode = "53.33,-6.25,1500mi",
token = token)
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
search_term <- "#snow"
# downloads tweets
token <- get_token()
greens <- search_tweets(q= search_term, n=10000,
geocode = "53.33,-6.25,1500mi",
token = token)
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
date <- Sys.Date()
date <- paste0(wday(date, label = T, abbr = F), " ", month(date, label = T, abbr = F), " ", day(date), " ",year(date))
search_term <- "#snow"
# downloads tweets
token <- get_token()
greens <- search_tweets(q= search_term, n=10000,
geocode = "53.33,-6.25,1500mi",
token = token)
# sees which lones have emojis
green_emojis <- greens %>%
mutate(emoji = emo::ji_extract_all(text)) %>%
unnest(cols = c(emoji)) %>%
count(emoji, sort = TRUE)
# function to download emoji image
emoji_to_link <- function(x) {
paste0("https://emojipedia.org/emoji/",x) %>%
read_html() %>%
html_nodes("tr td a") %>%
.[1] %>%
html_attr("href") %>%
paste0("https://emojipedia.org/", .) %>%
read_html() %>%
html_node('div[class="vendor-image"] img') %>%
html_attr("src")
}
# makes html/image label
link_to_img <- function(x, size = 20) {
paste0("<img src='", x, "' width='", size, "'/>")
}
# makes df of top ten, with url's and labels
top_green <- green_emojis %>%
slice(1:10) %>%
mutate(url = map_chr(emoji, slowly(~emoji_to_link(.x), rate_delay(1))),
label = link_to_img(url))
offset <- max(top_green$n) / 20
top_green %>%
ggplot(aes(fct_reorder(emoji, n, .desc = F), n, label = label)) +
geom_col(fill = "darkolivegreen") +
geom_richtext(aes(y = n + offset), fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = "Number of Tweets") +
ggtitle(paste0("Emojis in Tweets Featuring\n\"", search_term, "\" from\n", date)) +
theme_minimal() +
theme(title = element_text(family = "Ink Free", face = "bold", size = 28),
plot.title = element_text(hjust = 0.8, vjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_text(size = 36), # size of emoji icons
axis.text.x = element_text(size = 24), # numbers on bottom axis
panel.grid = element_blank(),
axis.ticks.x = element_blank()) +
coord_flip()
?search_tweets
View(greens)
library(tidyverse)
library(knitr)
library(kableExtra)
library(sf)
library(rworldmap)
library(tmap)
library(leaflet)
library(ggmap)
library(ggrepel)
library(ggsn)
library(geofacet)
library(rvest)
library(stringi)
require(handlr)
library(lubridate)
library(colorspace)
install.packages("ggsn")
install.packages("geofacet")
install.packages("rworldmap")
library(tidyverse)
library(knitr)
library(kableExtra)
library(sf)
library(rworldmap)
library(tmap)
library(leaflet)
library(ggmap)
library(ggrepel)
library(ggsn)
library(geofacet)
library(rvest)
library(stringi)
require(handlr)
library(lubridate)
library(colorspace)
data("domestic_violence")
library(tidyverse)
library(matlab)
begin <- 40001
end <- 50000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 94001
end <- 95000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(cartogram)
install.packages("cartogram")
library(maptools)
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
# We can visualize the region's boundaries with the plot function
plot(afr)
# We work with the cartogram library
library(cartogram)
# construct a cartogram using the population in 2005
afr_cartogram <- cartogram(afr, "POP2005", itermax=5)
# This is a new geospatial object, we can visualise it!
plot(afr_cartogram)
afr
afr$ISO2
afr$POP2005
afr$ISO3
afr$NAME
afr_cartogram <- cartogram(afr, "POP2005", itermax=5)
afr_cartogram <- cartogram_cont(afr, "POP2005", itermax=5)
?st_transform
afr |> st_transform(2048) |> cartogram_cont("POP2005", itermax=5)
library(sf)
afr |> st_transform(2048) |> cartogram_cont("POP2005", itermax=5)
class(afr)
afr |> st_as_sf() |> st_transform(2048) |> cartogram_cont("POP2005", itermax=5)
afr |> st_as_sf() |> st_transform(2048) |> cartogram_cont("POP2005", itermax=5) |> plot()
wrld_simpl
wrld_simpl$ISO2
wrld_simpl$ISO3
wrld_simpl[51,]
wrld_simpl[51,] |> plot()
library(tidyverse)
library(gapminder)
library(knitr)
library(kableExtra)
gapminder %>%
filter(continent == "Africa",
between(pop, 20e6, 50e6),
year %in% c(1952:1964)) %>%
kable()
gapminder
gapminder %>%
filter(continent == "Africa",
between(pop, 20e6, 50e6),
year %in% c(1952:1964))
palmerpenguins::penguins
xaringan:::list_css()
library(tidyverse)
USJudgeRatings
?USJudgeRatings
mean(flowers)
datasets(package = "ggplot")
data(package = "ggplot")
data(package = "ggplot2")
seals
mpg
msleep
mean(msleep$bodywt)
mean(msleep$awake)
remotes::install_github("rstudio/distill")
library(tidyverse)
ireland_grid <- read_csv("data/ireland.csv")
library(cartogram)
nz_carto = cartogram_cont(nz, "Median_income", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
library(tmap)
library(cartogram)
nz_carto = cartogram_cont(nz, "Median_income", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
library(spData)
library(cartogram)
nz_carto = cartogram_cont(nz, "Median_income", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
nz
library(cartogram)
nz_carto = cartogram_cont(nz, "Population", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
library(tidyverse)
library(sf)
z <- st_read("slides/data/counties.shp")
z
cattle <- read_csv("slides/data/cattle.csv")
cattle
z
cattle <- read_csv("slides/data/cattle.csv") |> rename(county = "NAME_TAG")
cattle <- read_csv("slides/data/cattle.csv") |> rename("NAME_TAG" = county)
cattle
z1 <- z |> st_join(cattle)
z1 <- z |> left_join(cattle)
z1
library(cartogram)
nz_carto = cartogram_cont(z1, "herd", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
z1
z1 <- z1 |> st_transform(29902)
library(cartogram)
nz_carto = cartogram_cont(z1, "herd", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
z1
z1 <- z1 |> drop_na()
z1
z <- read_sf("slides/data/counties.shp")
z1
z <- read_sf("slides/data/counties.shp") |> st_transform(29902)
cattle <- read_csv("slides/data/cattle.csv") |>
rename("NAME_TAG" = county)
z1 <- z |> left_join(cattle)
z1
z1$herd
z1 <- z |>
left_join(cattle) |>
filter(!is.na(herd))
z1$herd
nz_carto = cartogram_cont(z1, "herd", itermax = 5)
tm_shape(nz_carto) + tm_polygons("Median_income")
tm_shape(nz_carto) + tm_polygons("herd")
z1 |> select(herd, NAME_TAG)
z1 |> select(herd, NAME_TAG) |> View()
z1 |> select(herd, NAME_TAG) |> mutate(herd = herd^1.2) |> View()
z1 <- z |>
left_join(cattle) |>
filter(!is.na(herd)) |>
mutate(herd = herd^1.1)
nz_carto = cartogram_cont(z1, "herd", itermax = 5)
tm_shape(nz_carto) + tm_polygons("herd")
z1 <- z |>
left_join(cattle) |>
filter(!is.na(herd)) |>
mutate(herd = herd^1.3)
nz_carto = cartogram_cont(z1, "herd", itermax = 5)
tm_shape(nz_carto) + tm_polygons("herd")
?tm_polygons
tm_shape(nz_carto) + tm_polygons("herd", legend.show = F)
